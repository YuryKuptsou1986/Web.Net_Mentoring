// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace KiotaWebApi.Client.Models {
    public class ProductViewModel : IParsable {
        /// <summary>The category property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public CategoryViewModel? Category { get; set; }
#nullable restore
#else
        public CategoryViewModel Category { get; set; }
#endif
        /// <summary>The categoryId property</summary>
        public int? CategoryId { get; set; }
        /// <summary>The discontinued property</summary>
        public bool? Discontinued { get; set; }
        /// <summary>The productId property</summary>
        public int? ProductId { get; set; }
        /// <summary>The productName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProductName { get; set; }
#nullable restore
#else
        public string ProductName { get; set; }
#endif
        /// <summary>The quantityPerUnit property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? QuantityPerUnit { get; set; }
#nullable restore
#else
        public string QuantityPerUnit { get; set; }
#endif
        /// <summary>The reorderLevel property</summary>
        public int? ReorderLevel { get; set; }
        /// <summary>The supplier property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public SupplierViewModel? Supplier { get; set; }
#nullable restore
#else
        public SupplierViewModel Supplier { get; set; }
#endif
        /// <summary>The supplierId property</summary>
        public int? SupplierId { get; set; }
        /// <summary>The unitPrice property</summary>
        public double? UnitPrice { get; set; }
        /// <summary>The unitsInStock property</summary>
        public int? UnitsInStock { get; set; }
        /// <summary>The unitsOnOrder property</summary>
        public int? UnitsOnOrder { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static ProductViewModel CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new ProductViewModel();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"category", n => { Category = n.GetObjectValue<CategoryViewModel>(CategoryViewModel.CreateFromDiscriminatorValue); } },
                {"categoryId", n => { CategoryId = n.GetIntValue(); } },
                {"discontinued", n => { Discontinued = n.GetBoolValue(); } },
                {"productId", n => { ProductId = n.GetIntValue(); } },
                {"productName", n => { ProductName = n.GetStringValue(); } },
                {"quantityPerUnit", n => { QuantityPerUnit = n.GetStringValue(); } },
                {"reorderLevel", n => { ReorderLevel = n.GetIntValue(); } },
                {"supplier", n => { Supplier = n.GetObjectValue<SupplierViewModel>(SupplierViewModel.CreateFromDiscriminatorValue); } },
                {"supplierId", n => { SupplierId = n.GetIntValue(); } },
                {"unitPrice", n => { UnitPrice = n.GetDoubleValue(); } },
                {"unitsInStock", n => { UnitsInStock = n.GetIntValue(); } },
                {"unitsOnOrder", n => { UnitsOnOrder = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<CategoryViewModel>("category", Category);
            writer.WriteIntValue("categoryId", CategoryId);
            writer.WriteBoolValue("discontinued", Discontinued);
            writer.WriteIntValue("productId", ProductId);
            writer.WriteStringValue("productName", ProductName);
            writer.WriteStringValue("quantityPerUnit", QuantityPerUnit);
            writer.WriteIntValue("reorderLevel", ReorderLevel);
            writer.WriteObjectValue<SupplierViewModel>("supplier", Supplier);
            writer.WriteIntValue("supplierId", SupplierId);
            writer.WriteDoubleValue("unitPrice", UnitPrice);
            writer.WriteIntValue("unitsInStock", UnitsInStock);
            writer.WriteIntValue("unitsOnOrder", UnitsOnOrder);
        }
    }
}
