// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace KiotaWebApi.Client.Models {
    public class CategoryViewModel : IParsable {
        /// <summary>The categoryId property</summary>
        public int? CategoryId { get; set; }
        /// <summary>The categoryName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CategoryName { get; set; }
#nullable restore
#else
        public string CategoryName { get; set; }
#endif
        /// <summary>The description property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The picture property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Picture { get; set; }
#nullable restore
#else
        public string Picture { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static CategoryViewModel CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new CategoryViewModel();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"categoryId", n => { CategoryId = n.GetIntValue(); } },
                {"categoryName", n => { CategoryName = n.GetStringValue(); } },
                {"description", n => { Description = n.GetStringValue(); } },
                {"picture", n => { Picture = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("categoryId", CategoryId);
            writer.WriteStringValue("categoryName", CategoryName);
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("picture", Picture);
        }
    }
}
